openapi: 3.1.0
info:
  title: RaaSWebAPIv2
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
paths:
  '/mapMeta/{id}':
    get:
      summary: get MapMeta
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/mapMeta.v2.json
      operationId: get-mapMeta
    post:
      summary: post new MapMeta
      tags: []
      responses: {}
      operationId: post-mapMeta
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: ../models/common/updateDateObject.json
                - $ref: ../models/mapParams.v2.json
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: map id
  '/mapMeta/{id}/params':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: map id
    post:
      summary: post map params
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/mapParams.v2.json
      operationId: post-mapMeta-id-params
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/mapParams.v2.json
    get:
      summary: get map params
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/mapParams.v2.json
      operationId: get-mapMeta-id-params
  '/map/{map_id}/pgm':
    parameters:
      - schema:
          type: string
        name: map_id
        in: path
        required: true
    get:
      summary: get pgm url
      tags: []
      responses: {}
      operationId: get-map-map_id-pgm
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      examples:
        - id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        dateOfBirth:
          type: string
          format: date
          example: '1997-10-31'
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        createDate:
          type: string
          format: date
          description: The date that the user was created.
      required:
        - id
        - firstName
        - lastName
        - email
        - emailVerified
    Map:
      allOf:
        - $ref: ../models/mapMeta.v2.json
